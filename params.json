{"name":"FastMaxFlow","tagline":"Nearly maximum flows in nearly linear time and other flow approximation tools","body":"<h2>What?</h2>\r\nA python implementation of an algorithm for solving maximum flow (or more generally, minimum congestion) problems on a capacitated graph as described by Jonah Sherman [1].\r\n\r\nThe resulting flow assignment is epsilon-accurate and takes time [\"nearly\"](http://en.wikipedia.org/wiki/Big_O_notation#Extensions_to_the_Bachmann.E2.80.93Landau_notations) proportional to the number of edges, and inversely proportional to the square of the error term epsilon.\r\n\r\nAdditionally, implementations of the Nagamochi-Ibaraki edge connectivity certificate [2, 3] and Benczur and Karger's approximate cut preserving sparsification [4] are provided.\r\n\r\n<h3>Citations</h3>\r\n1. J. Sherman: Nearly Maximum Flows in Nearly Linear Time, [arXiv:1304.2077](http://arxiv.org/abs/1304.2077).\r\n2. H. Nagamochi, T. Ibaraki: Computing the edge-connectivity of multigraphs and capacitated graphs, SIAM J. Discrete Mathematics vol.5, 1992, pp.54-66.\r\n3. H. Nagamochi, T. Ibaraki: A linear-time algorithm for finding a sparse k-connected spanning subgraph of a k-connected graph, Algorithmica vol.7, 1992, pp.583-596.\r\n4. A. Benczur, D. Karger: Randomized Approximation Schemes for Cuts and Flows in Capacitated Graphs, [arXiv:cs/0207078](http://arxiv.org/abs/cs/0207078).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}